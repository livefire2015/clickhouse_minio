version: '3.7'

volumes:
  data1-1:

networks: 
  default:
    name: backend-ch

services:
  minio:
    extends:
      file: ./minio/minio-service.yml
      service: minio

  minio-client:
    extends:
      file: ./minio/minio-client.yml
      service: minio-client
    depends_on:
      minio:
        condition: service_healthy

  zookeeper:
    extends:
      file: ./zk/zookeeper-service.yml
      service: zookeeper

  clickhouse1:
    extends:
      file: ./ckh/ops/clickhouse-service.yml
      service: clickhouse
    hostname: clickhouse1
    volumes:
      - "./ckh/ops/_instances/clickhouse1/database/:/var/lib/clickhouse/"
      - "./ckh/ops/_instances/clickhouse1/logs/:/var/log/clickhouse-server/"
      - "./ckh/ops/configs/clickhouse1/config.d/macros.xml:/etc/clickhouse-server/config.d/macros.xml"
    ports:
      - "9000:9000"
    depends_on:
      zookeeper:
        condition: service_healthy

  clickhouse2:
    extends:
      file: ./ckh/ops/clickhouse-service.yml
      service: clickhouse
    hostname: clickhouse2
    volumes:
      - "./ckh/ops/_instances/clickhouse2/database/:/var/lib/clickhouse/"
      - "./ckh/ops/_instances/clickhouse2/logs/:/var/log/clickhouse-server/"
      - "./ckh/ops/configs/clickhouse2/config.d/macros.xml:/etc/clickhouse-server/config.d/macros.xml"
    depends_on:
      zookeeper:
        condition: service_healthy

  clickhouse3:
    extends:
      file: ./ckh/ops/clickhouse-service.yml
      service: clickhouse
    hostname: clickhouse3
    volumes:
      - "./ckh/ops/_instances/clickhouse3/database/:/var/lib/clickhouse/"
      - "./ckh/ops/_instances/clickhouse3/logs/:/var/log/clickhouse-server/"
      - "./ckh/ops/configs/clickhouse3/config.d/macros.xml:/etc/clickhouse-server/config.d/macros.xml"
    depends_on:
      zookeeper:
        condition: service_healthy

  zkk:
    container_name: zkk
    image: confluentinc/cp-zookeeper:5.3.5
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
    ports:
      - 2181:2181

  kafka:
    container_name: kafka
    build: ./kafka
    environment: 
      - DEFAULT_TOPIC=${DEFAULT_TOPIC}
      - KAFKA_ZOOKEEPER_CONNECT=${ZOOKEEPER_URL}
      - KAFKA_ADVERTISED_LISTENERS=${KAFKA_LISTENERS}
    depends_on:
      - zkk  

  schema-registry:
    container_name: schema-registry
    image: confluentinc/cp-schema-registry:5.3.5
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=${SCHEMA_REGISTRY_HOST_NAME}
      - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=${ZOOKEEPER_URL}
      - SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL=${SCHEMA_REGISTRY_LOGLEVEL}
    depends_on:
      - kafka

  postgres:
    container_name: postgres
    image: postgres:13.4
    environment:
        - POSTGRES_USER=${AIRFLOW}
        - POSTGRES_PASSWORD=${AIRFLOW}
        - POSTGRES_DB=${AIRFLOW}
    logging:
        options:
            max-size: 10m
            max-file: "3"        

  airflow:
    container_name: airflow
    build: ./airflow
    restart: unless-stopped
    logging:
        options:
            max-size: 10m
            max-file: "3"
    command: ["webserver"]
    ports:
        - 8080:8080
    volumes:
        - ./airflow/dags:/usr/local/airflow/dags
        - ./airflow/modules:/usr/local/airflow/modules
    healthcheck:
        test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
        interval: 30s
        timeout: 30s
        retries: 3
    depends_on:
        - postgres

  # dummy service which does nothing, but allows to postpone 
  # 'docker-compose up -d' till all dependecies will go healthy
  all_services_ready:
    image: hello-world
    depends_on:
      clickhouse1:
        condition: service_healthy
      clickhouse2:
        condition: service_healthy
      clickhouse3:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
      minio:
        condition: service_healthy
      airflow:
        condition: service_healthy
